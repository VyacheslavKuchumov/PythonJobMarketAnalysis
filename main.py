import pandas as pd
import matplotlib.pyplot as plt

ekat_data = pd.read_csv('ekat_jobs.csv')
perm_data = pd.read_csv('perm_jobs.csv')
ekat_df = pd.DataFrame(ekat_data)
perm_df = pd.DataFrame(perm_data)




# Словарь с ключевыми словами для классификации по группам
group_keywords = {
    "IT и технологии": [
        "программист", "разработчик", "системный", "инженер", "data", "дата",
        "devops", "техподдержка", "системный администратор", "сетевой инженер",
        "технический писатель", "системный аналитик", "специалист по информационной безопасности",
        "специалист технической поддержки", "дата-сайентист", "bi-аналитик",
        "специалист по сертификации", "продуктовый аналитик", "видеооператор",
        "видеомонтажер"
    ],
    "Медицина и фармацевтика": [
        "врач", "медицинский", "ветеринар", "ассистент врача", "фармацевт",
        "медпредставитель", "главный врач", "заведующий отделением", "медицинская сестра",
        "медицинский брат", "фармацевт-провизор", "лаборант", "косметолог"
    ],
    "Финансы и бухгалтерия": [
        "бухгалтер", "финансовый", "аудитор", "казначей", "кредитный",
        "аналитик", "инвестиционный", "финансовый контролер", "финансовый менеджер",
        "финансовый аналитик", "комплаенс-менеджер", "андеррайтер", "казначей",
        "финансовый директор (cfo)"
    ],
    "Менеджмент и руководство": [
        "директор", "руководитель", "начальник", "менеджер", "управляющий",
        "координатор", "генеральный директор", "исполнительный директор (ceo)",
        "директор по информационным технологиям (cio)", "руководитель отдела",
        "менеджер по персоналу", "менеджер продукта", "менеджер/консультант по стратегии",
        "арт-директор", "креативный директор", "руководитель проектов",
        "начальник смены", "директор юридического департамента (clo)",
        "коммерческий директор (cco)", "операционный директор (coo)",
        "директор по маркетингу и pr (cmo)", "директор по персоналу (hrd)"
    ],
    "Связь с общественностью": [
        "pr", "маркетинг", "контент", "smm", "журналист", "редактор",
        "копирайтер", "психолог", "маркетолог-аналитик", "руководитель отдела маркетинга",
        "копирайтер, редактор", "smm-менеджер", "журналист, корреспондент",
        "event-менеджер", "продюсер", "режиссер", "сценарист", "контент-менеджер"
    ],
    "Производство и строительство": [
        "инженер", "строитель", "монтажник", "сварщик", "слесарь", "токарь",
        "механик", "мастер", "инженер-конструктор", "инженер-проектировщик",
        "инженер по качеству", "инженер-энергетик", "инженер-электрик",
        "инженер по охране труда", "прораб", "мастер смр", "мастер по ремонту",
        "инженер по эксплуатации", "технолог", "инженер пто", "инженер-сметчик",
        "инженер-электроник", "инженер-электронщик"
    ],
    "Торговля": [
        "продавец", "кассир", "мерчандайзер", "агент", "менеджер по продажам",
        "оценщик", "товаровед", "агент по недвижимости", "торговый представитель",
        "продавец-консультант", "продавец-кассир", "заведующий аптекой",
        "директор магазина", "директор сети магазинов", "администратор магазина",
        "администратор торгового зала"
    ],
    "Образование и наука": [
        "учитель", "преподаватель", "исследователь", "методист", "метролог",
        "научный специалист", "методолог", "учитель, преподаватель, педагог",
        "воспитатель", "няня", "научный специалист, исследователь"
    ],
    "Общественный сектор": [
        "охранник", "полицейский", "уборщик", "водитель", "военнослужащий",
        "дворник", "специалист по кадрам", "специалист службы безопасности",
        "курьер", "диспетчер", "машинист", "грузчик", "автослесарь", "автомеханик",
        "оператор call-центра", "специалист контактного центра", "упаковщик",
        "комплектовщик", "оператор пк", "архивариус"
    ],
    "Искусство и культура": [
        "артист", "актер", "аниматор", "фотограф", "ретушер", "дизайнер",
        "художник", "режиссер", "сценарист", "мастер ногтевого сервиса",
        "парикмахер", "массажист", "визажист", "стилист"
    ],
    "Гостиничный и ресторанный бизнес": [
        "менеджер ресторана", "официант", "бармен", "бариста", "повар",
        "пекарь", "кондитер", "хостес", "администратор"
    ],
    "Логистика и транспорт": [
            "менеджер по логистике", "менеджер по вэд", "начальник склада",
            "координатор отдела продаж", "оператор производственной линии",
            "специалист по тендерам", "специалист по взысканию задолженности",
            "руководитель отдела логистики"
    ],
    "Агропромышленность и экология": [
            "агроном", "зоотехник", "геолог", "инженер-эколог", "специалист по охране труда"
    ]
}

# Функция для определения группы на основе ключевых слов
def classify_job(professional_role):
    for group, keywords in group_keywords.items():
        if any(keyword.lower() in professional_role.lower() for keyword in keywords):
            return group
    return "Другое"

# Добавление столбца job_group в perm_df и ekat_df
perm_df["job_group"] = perm_df["professional_roles_name"].apply(classify_job)
ekat_df["job_group"] = ekat_df["professional_roles_name"].apply(classify_job)

# Вывод результатов
print("perm_df:")
print(perm_df)
print("\nekat_df:")
print(ekat_df)


ekat_data.to_csv('grouped_ekat.csv')
perm_data.to_csv('grouped_perm.csv')



# perm_df = perm_df[perm_df['job_group']!= 'Другое']
# ekat_df = ekat_df[ekat_df['job_group']!= 'Другое']


# Get job group counts for perm_df
perm_group_counts = perm_df["job_group"].value_counts()

# Plot bar chart
plt.bar(perm_group_counts.index, perm_group_counts.values)
plt.title('Job Groups in PERM Jobs')
plt.xlabel('Job Group')
plt.ylabel('Number of Jobs')
plt.xticks(rotation=90)
plt.tight_layout()
plt.savefig('perm_jobs_groups.png')


# Get job group counts for ekat_df
ekat_group_counts = ekat_df["job_group"].value_counts()

# Plot bar chart
plt.bar(ekat_group_counts.index, ekat_group_counts.values)
plt.title('Job Groups in EKAT Jobs')
plt.xlabel('Job Group')
plt.ylabel('Number of Jobs')
plt.xticks(rotation=90)
plt.tight_layout()
plt.savefig('ekat_jobs_groups.png')



# Concatenate dfs and get job group counts
all_data = pd.concat([perm_df, ekat_df])
all_group_counts = all_data["job_group"].value_counts()

# Plot bar chart with kind 'barh' for horizontal bars
plt.barh(all_group_counts.index, all_group_counts.values)
plt.title('Comparative Job Groups')
plt.xlabel('Number of Jobs')
plt.ylabel('Job Group')
plt.tight_layout()
plt.savefig('comparative_jobs_groups.png')
